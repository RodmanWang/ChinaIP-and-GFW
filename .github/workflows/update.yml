name: Update ChinaIP-and-GFW database

on:
  workflow_dispatch:
  schedule: 
    - cron:  '30 20 * * *' 
  push:
    branches:
      - main
    paths-ignore:
      - "**/README.md"
      
jobs:
  build:
    name: Generate GeoIP2 database
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
        
    - name: Create dist folder
      run: mkdir -p dist1
           mkdir -p dist2
           mkdir -p dist3
           mkdir -p dist4
    - name: Compile GeoIP conversion bin (Golang)
      run: /bin/bash ./build.sh

    - name: Obtain CN IP lists
      run: |
        #chinaIP
        curl -LR -o dist/ChinaIPv4v6.txt "https://raw.githubusercontent.com/Loyalsoldier/geoip/release/text/cn.txt"
        curl -LR -o dist/googleCN.txt "https://raw.githubusercontent.com/RodmanWang/ChinaIP-and-GFW/main/patch/googleCN.txt"
        
        #bogus-nxdomain   
        curl -LR -o dist2/bogus-nxdomain1.conf "https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/bogus-nxdomain.china.conf"
        curl -LR -o dist2/bogus-nxdomain2.conf "https://raw.githubusercontent.com/RodmanWang/ChinaIP-and-GFW/main/patch/bogus-nxdomain-custom.conf"
        
        #Domestic-Domain
        curl -LR -o dist3/domains.china.conf "https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/accelerated-domains.china.conf"
        curl -LR -o dist3/Domestic.yaml "https://raw.githubusercontent.com/RodmanWang/openclash-rule/main/rule-provider/Domestic.yaml"
        
        #GFW
        curl -LR -o dist4/Proxy.yaml "https://raw.githubusercontent.com/RodmanWang/openclash-rule/main/rule-provider/Proxy.yaml"
        curl -LR -o dist4/gfw2.txt "https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/gfw.txt"
        curl -LR -o dist4/gfw3.txt "https://raw.githubusercontent.com/RodmanWang/ChinaIP-and-GFW/main/patch/gfw-custom.txt"      
   
    - name: Merge and IP lists and remove duplicates
      run: |

        #生成不包含googleCN.txt中ip的ChinaIPv4v6地址
        awk 'NR==FNR{a[$0];next} {for (i in a) if (i ~ $0) next} 1' dist/googleCN.txt dist/ChinaIPv4v6.txt > dist/ChinaIP.txt
        #
        #生成不包含googleCN.txt中ip的ChinaIPV4地址
        awk 'NR==FNR{a[$0];next} {for (i in a) if (i ~ $0) next} 1' dist/googleCN.txt dist/ChinaIPv4v6.txt | grep -Ev "^$|^\s*#|.*\:.*" > dist/ChinaIPv4.txt
        #
        #生成不包含googleCN.txt中ip的ChinaIPV6地址
        awk '!seen[$0]++' dist/ChinaIPv4v6.txt | grep -Ev "^$|^\s*#|.*\..*" > dist/ChinaIPv6.txt  
        #
        #每行数据开头添加“blacklist-ip ”字符，生成SmartDNS使用的黑名单IP
        cat dist/ChinaIP.txt | sed "s/^\(.*\)$/blacklist-ip \1/g" > dist/BlacklistIP.conf
        #
        #行数据开头添加“blacklist-ip ”字符，生成SmartDNS使用的白名单IP
        cat dist/ChinaIP.txt | sed "s/^\(.*\)$/whitelist-ip \1/g" > dist/WhitelistIP.conf
        #
        
        
        #汇总数据
        awk 'FNR==1{print ""}{print}' dist2/*.conf > dist2/nxdomain1.conf
        #
        #删除每行数据中的”bogus-nxdomain=//“字符，方便汇总，便与后续排序
        sed -i 's/bogus-nxdomain=//' dist2/nxdomain1.conf
        #
        #ip格式排序，删除空行，注释行，重复行
        awk '!seen[$0]++' dist2/nxdomain1.conf | sort -t'.' -k1,1n -k2,2n -k3,3n -k4,4n | grep -Ev "^$|^\s*#" > dist2/nxdomain2.conf
        #
        #每行数据开头添加“bogus-nxdomain ”，生成SmartDNS使用的忽略IP解析文件
        cat dist2/nxdomain2.conf | sed "s/^\(.*\)$/bogus-nxdomain \1\/32/g" > dist2/BogusNxdomain.conf
        #
        #生成openclash使用的ip格式
        sed -e '1i payload:' -e '1,$s/^/  - \x27/' -e '1,$s/$/\/32\x27/' -e '1a # >AD & BanIP' dist2/nxdomain2.conf > dist2/Ad·IP.yaml
        #

        #Domestic文件仅保留"- DOMAIN-SUFFIX,“和”- DOMAIN,“字符的行数据，生成新文件
        grep '\(- DOMAIN-SUFFIX,\|- DOMAIN,\)' dist3/Domestic.yaml > dist3/Domestic1.yaml
        #
        #新文件删除每行数据中的"- DOMAIN-SUFFIX,“或”- DOMAIN,“字符，并让每行顶格，方便汇总，便与后续排序
        sed -i 's/- DOMAIN-SUFFIX,//g; s/- DOMAIN,//g; s/[[:space:]]*//g' dist3/Domestic1.yaml
        #
        #对补充的自定义国内域名文件，开头添加“server=/”字符，末尾添加”/114.114.114.114“字符，保证与后续其他域名格式一致
        cat dist3/Domestic1.yaml | sed "s/^\(.*\)$/server=\/\1\/114.114.114.114/g" > dist3/other.conf
        #
        #汇总，字符格式排序，删除空行，注释行，重复行
        awk 'FNR==1{print ""}{print}' dist3/*.conf > dist3/china1.conf
        awk '!seen[$0]++' dist3/china1.conf | sort -t. -k1 | grep -Ev "^$|^\s*#" > dist3/ChinaDomain.conf
        #
        #复制一份生成的ChinaDomain并改名，用于一般代理软件使用
        cp -f dist3/ChinaDomain.conf dist3/ChinaDomain2.conf
        #
        #将原生成的ChinaDomain文件，每行数据开头添加“nameserver /”字符，末尾添加”domestic“字符，生成SmartDNS使用的指定解析组的国内域名文件
        sed -i "s/^server=\/\(.*\)\/[^\/]*$/nameserver \/\1\/domestic/g;/^nameserver/!d" dist3/ChinaDomain.conf
        #
        
        #仅保留"- DOMAIN-SUFFIX,“和”- DOMAIN,“字符的行数据，生成新文件
        grep '\(- DOMAIN-SUFFIX,\|- DOMAIN,\)' dist4/Proxy.yaml > dist4/gfw1.txt
        #
        #新文件删除每行数据中的"- DOMAIN-SUFFIX,“或”- DOMAIN,“字符，并让每行顶格，方便汇总，便与后续排序
        sed -i 's/- DOMAIN-SUFFIX,//g; s/- DOMAIN,//g; s/[[:space:]]*//g' dist4/gfw1.txt
        #
        #汇总，字符格式排序，删除空行，注释行，重复行
        awk 'FNR==1{print ""}{print}' dist4/*.txt > dist4/gfw0.txt
        awk '!seen[$0]++' dist4/gfw0.txt | sort -t. -k1 | grep -Ev "^$|^\s*#" > dist4/GFW.txt 
        #
        #每行数据开头添加“||”字符，生成代理使用的格式GFW 
        awk '!seen[$0]++' dist4/GFW.txt | sed "s/^/\|\|&/p" > dist4/AutoGFW.txt
        #
        #每行数据开头添加“nameserver /”字符，末尾添加”/abroad“字符，生成SmartDNS使用的指定解析组的GFW文件
        cat dist4/GFW.txt | sed "s/^\(.*\)$/nameserver \/\1\/abroad/g" > dist4/GFW.conf
        #
        
    - name: Generate GeoIP2 database
      run: |
        CURRENT_DIR=$(pwd)
        cd dist
        ./ipip2mmdb -s ./ChinaIP.txt -d Country.mmdb
        cd $CURRENT_DIR
        
    - name: Push artifacts to release branch
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git fetch
        git checkout release
        
        git checkout --orphan release-orphan
        git rm -rf .
        
        cp -rf dist/ChinaIPv4.txt ./
        cp -rf dist/ChinaIPv6.txt ./
        cp -rf dist/BlacklistIP.conf  ./
        cp -rf dist/WhitelistIP.conf ./
        cp -rf dist/Country.mmdb ./
        cp -rf dist2/BogusNxdomain.conf ./
        cp -rf dist2/Ad·IP.yaml ./
        cp -rf dist3/ChinaDomain.conf ./
        cp -rf dist3/ChinaDomain2.conf ./
        cp -rf dist4/GFW.txt ./
        cp -rf dist4/AutoGFW.txt ./
        cp -rf dist4/GFW.conf ./

                
        git add Country.mmdb         
        git add ChinaIPv4.txt     
        git add ChinaIPv6.txt
        git add GFW.txt              #纯域名
        git add AutoGFW.txt          #Switchy 格式
        git add BlacklistIP.conf    #SmartDNS格式
        git add WhitelistIP.conf    #SmartDNS格式
        git add ChinaDomain.conf    #SmartDNS格式
        git add ChinaDomain2.conf   #代理软件使用格式,国内域名
        git add GFW.conf             #SmartDNS格式
        git add BogusNxdomain.conf  #SmartDNS格式，忽略解析IP
        git add Ad·IP.yaml  #openclash使用的ip格式P
        
        git commit -m "update : $(TZ=UTC-8 date "+%Y-%m-%d %H:%M:%S")"
        git branch -D release
        git branch -m release
            
    - name: GitHub Push
      uses: ad-m/github-push-action@v0.6.0
      with:
        github_token: ${{ secrets.PERSON_TOKEN }}
        branch: release
        force: true
